<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="105">
  <server artifactsdir="artifacts" agentAutoRegisterKey="c53fcbb4-0f35-49bc-8186-b3272d15d6ff" webhookSecret="f18a575c-1a45-4004-8c17-8baf03142cec" commandRepositoryLocation="default" serverId="8aca620d-7e8e-4acf-9e9f-f81a1780f880" tokenGenerationKey="b792ec27-487b-4047-a0b4-bbd8c65959db">
    <security>
      <authConfigs>
        <authConfig id="passwordfile" pluginId="cd.go.authentication.passwordfile">
          <property>
            <key>PasswordFilePath</key>
            <value>/godata/password.properties</value>
          </property>
        </authConfig>
        <authConfig id="github-oauth" pluginId="cd.go.authorization.github">
          <property>
            <key>ClientId</key>
            <encryptedValue>fwL5mCLSwUVCT0CC4KuXtUAKni0j+a+0</encryptedValue>
          </property>
          <property>
            <key>ClientSecret</key>
            <encryptedValue>B9XQrPJQ1O/0wmExsi1NVpj6ndPc9JK0XGumOwRlCKq+hrRMPGUFKFW7A9AMxdW6</encryptedValue>
          </property>
          <property>
            <key>AuthenticateWith</key>
            <value>GitHub</value>
          </property>
          <property>
            <key>GitHubEnterpriseUrl</key>
            <value />
          </property>
          <property>
            <key>AllowedOrganizations</key>
            <value />
          </property>
          <property>
            <key>AuthorizeUsing</key>
            <value>PersonalAccessToken</value>
          </property>
          <property>
            <key>PersonalAccessToken</key>
            <encryptedValue>jx9foYzkwtMgWr/TYZS90ONgd1vcq0wo99MYZmYnoiagZjYGpOFWE23vVgIUZG3b</encryptedValue>
          </property>
        </authConfig>
        <authConfig id="google-oauth" pluginId="cd.go.authorization.google">
          <property>
            <key>ClientId</key>
            <encryptedValue>qRMvOjwubZagzKZmx6YYGw5bG+Er3xPViDelxFTupcDFNVj9KKIC3IMsA24YdR+xGsRekN/5BNvwDkM37MYBSK8Eh2QuFYeDXvQr/BqX5vU=</encryptedValue>
          </property>
          <property>
            <key>ClientSecret</key>
            <encryptedValue>kwlbyQll4o5MfLGbdSm/6L6HEFRGjF6md5061YEpOCU=</encryptedValue>
          </property>
          <property>
            <key>AllowedDomains</key>
            <value>gmail.com
dailybrain.fr</value>
          </property>
        </authConfig>
      </authConfigs>
      <roles>
        <role name="admins">
          <users>
            <user>admin</user>
          </users>
        </role>
        <role name="view-only">
          <users>
            <user>guest</user>
          </users>
        </role>
        <pluginRole name="github-dailybrain-members" authConfigId="github-oauth">
          <property>
            <key>Organizations</key>
            <value>dailybrain</value>
          </property>
          <property>
            <key>Teams</key>
            <value />
          </property>
          <property>
            <key>Users</key>
            <value />
          </property>
        </pluginRole>
      </roles>
      <admins>
        <user>admin</user>
      </admins>
    </security>
  </server>
  <pipelines group="Platform">
    <authorization>
      <view>
        <role>view-only</role>
        <role>github-dailybrain-members</role>
      </view>
      <operate>
        <role>github-dailybrain-members</role>
      </operate>
      <admins>
        <role>admins</role>
      </admins>
    </authorization>
    <pipeline name="Check_Platform" labeltemplate="${git[:7]}" lockBehavior="none">
      <materials>
        <git url="https://github.com/vspiewak/hubot-twitter-mention" shallowClone="true" materialName="git" />
      </materials>
      <stage name="ready-stage">
        <jobs>
          <job name="ready-job">
            <tasks>
              <exec command="echo">
                <arg>"ready"</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="check-install-stage">
        <jobs>
          <job name="npm-check">
            <tasks>
              <exec command="npm">
                <arg>version</arg>
              </exec>
            </tasks>
            <resources>
              <resource>npm</resource>
            </resources>
          </job>
          <job name="jdk-check">
            <tasks>
              <exec command="javac">
                <arg>-version</arg>
              </exec>
            </tasks>
            <resources>
              <resource>jdk</resource>
            </resources>
          </job>
          <job name="golang-check">
            <tasks>
              <exec command="go">
                <arg>version</arg>
              </exec>
            </tasks>
            <resources>
              <resource>golang</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="MicroServices">
    <authorization>
      <view>
        <role>admins</role>
        <role>view-only</role>
      </view>
      <operate>
        <role>admins</role>
      </operate>
      <admins>
        <role>admins</role>
      </admins>
    </authorization>
    <pipeline name="ServiceA" labeltemplate="${ServiceA[:7]}">
      <materials>
        <git url="https://github.com/vspiewak/devoxxfr-2016-gocd-nono" materialName="ServiceA" />
      </materials>
      <stage name="dummyStage">
        <jobs>
          <job name="dummyJob">
            <tasks>
              <exec command="echo">
                <arg>"ok"</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ServiceB" labeltemplate="${ServiceB[:7]}">
      <materials>
        <git url="https://github.com/vspiewak/devoxxfr-2016-gocd-sample-app" materialName="ServiceB" />
      </materials>
      <stage name="dummyStage" fetchMaterials="false">
        <jobs>
          <job name="dummyJob">
            <tasks>
              <exec command="echo">
                <arg>"ok"</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ServiceC" labeltemplate="${ServiceC[:7]}">
      <materials>
        <pipeline pipelineName="ServiceA" stageName="dummyStage" materialName="ServiceA" />
        <pipeline pipelineName="ServiceB" stageName="dummyStage" materialName="ServiceB" />
        <git url="https://github.com/vspiewak/hubot-ansible" materialName="ServiceC" />
      </materials>
      <stage name="dummyStage" fetchMaterials="false">
        <jobs>
          <job name="dummyJob">
            <tasks>
              <exec command="echo">
                <arg>"ok"</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="TodoMVC">
    <authorization>
      <view>
        <role>admins</role>
        <role>view-only</role>
      </view>
      <operate>
        <role>admins</role>
      </operate>
      <admins>
        <role>admins</role>
      </admins>
    </authorization>
    <pipeline name="React" labeltemplate="${git[:7]}" lockBehavior="none">
      <materials>
        <git url="https://github.com/tastejs/todomvc.git" shallowClone="true" materialName="git" />
      </materials>
      <stage name="defaultStage" cleanWorkingDir="true">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="npm" workingdir="examples/react">
                <arg>install</arg>
                <runif status="passed" />
              </exec>
              <exec command="find" workingdir="examples/react">
                <arg>.</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="examples/react">
                <arg>-c</arg>
                <arg>zip --symlinks -r -q dist.$GO_PIPELINE_LABEL.zip . -x '.git*' -x '*.zip'</arg>
                <runif status="passed" />
              </exec>
              <exec command="find" workingdir="examples/react">
                <arg>.</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>npm</resource>
            </resources>
            <artifacts>
              <artifact src="examples/react/dist.*.zip" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Others">
    <authorization>
      <view>
        <role>admins</role>
        <role>view-only</role>
      </view>
      <operate>
        <role>admins</role>
      </operate>
      <admins>
        <role>admins</role>
      </admins>
    </authorization>
    <pipeline name="React_Boilerplate" labeltemplate="${git[:7]}" lockBehavior="none">
      <materials>
        <git url="https://github.com/react-boilerplate/react-boilerplate.git" shallowClone="true" materialName="git" />
      </materials>
      <stage name="ready-stage">
        <jobs>
          <job name="ready-job">
            <tasks>
              <exec command="find">
                <arg>.</arg>
              </exec>
              <exec command="npm">
                <arg>version</arg>
              </exec>
              <exec command="node">
                <arg>./internals/scripts/generate-templates-for-linting</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>npm</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Go_API" labeltemplate="${git[:7]}" lockBehavior="none">
      <materials>
        <git url="https://github.com/vspiewak/go-hp-api" shallowClone="true" materialName="git" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="go-build">
            <tasks>
              <exec command="bash">
                <arg>-c</arg>
                <arg>GOPATH=$(pwd); cd src/gohpapi; make build</arg>
                <runif status="passed" />
              </exec>
              <exec command="find">
                <arg>.</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>golang</resource>
            </resources>
            <artifacts>
              <artifact src="src/gohpapi/target" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <environments>
    <environment name="Build">
      <pipelines>
        <pipeline name="Check_Platform" />
        <pipeline name="ServiceA" />
        <pipeline name="ServiceB" />
        <pipeline name="ServiceC" />
        <pipeline name="React" />
        <pipeline name="React_Boilerplate" />
        <pipeline name="Go_API" />
      </pipelines>
    </environment>
    <environment name="Demo" />
    <environment name="Prod" />
  </environments>
</cruise>
